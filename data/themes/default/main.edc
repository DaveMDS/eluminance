
#define DBG_SHOW(_PART, _R, _G, _B) \
   part { name: "dbg_show"_PART; \
      type: RECT; mouse_events: 0; \
      description { state: "default" 0.0; \
         rel1.to: _PART; rel2.to: _PART; \
         color: _R _G _B 50; } }

#define SHOW(_PART) DBG_SHOW(_PART, 50, 0, 0)

#define FIXED_SIZE(_W, _H) \
   min: _W _H; max: _W _H; fixed: 1 1;


images {
   image: "bg_fill.png" COMP;
   image: "bg_overlay.png" COMP;
   image: "bg_bevel.png" COMP;
   image: "glint.png" COMP;
   image: "status_bg.png" COMP;
}

collections {

   /// MAIN UI ////////////////////////////////////////////////////////////////
   group { name: "eluminance/main";
      parts {
         //// Background  -----------------------------------------------------
         part { name: "bg_fill"; mouse_events: 0;
            description { state: "default" 0.0;
               fixed: 1 1;
               image.normal: "bg_fill.png";
               fill {
                  size.relative: 0.0 0.0;
                  size.offset: 64 64;
               }
            }
            part { name: "bg_overlay"; mouse_events: 0;
               description { state: "default" 0.0;
                  fixed: 1 1;
                  image.normal: "bg_overlay.png";
                  fill.smooth: 0;
               }
            }
            part { name: "bg_bevel";
               description { state: "default" 0.0;
                  image.normal: "bg_bevel.png";
                  image.border: 1 1 1 1;
                  image.middle: 0;
                  fill.smooth: 0;
               }
            }
         }

         //// Photocam  -------------------------------------------------------
         part { name: "photo.swallow"; type: SWALLOW;
            description { state: "default" 0.0;
            }
         }

         //// Tree  -----------------------------------------------------------
         part { name: "tree_clip"; type: RECT;
            description { state: "default" 0.0;
               rel2.relative: 0.0 0.0;
               rel2.to_y: "status";
               rel2.offset: -1 0;
               min: 200 0;
               fixed: 1 1;
               align: 1.0 0.0;
               color: 255 255 255 0;
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               align: 0.0 0.0;
               color: 255 255 255 255;
            }
         }
         part { name: "tree_events"; type: RECT;
            repeat_events: 1;
            description { state: "default" 0.0;
               color: 0 0 0 0;
            }
         }
         part { name: "tree.swallow"; type: SWALLOW;
            clip_to: "tree_clip";
            description { state: "default" 0.0;
               rel1.to: "tree_clip";
               rel2.to: "tree_clip";
               fixed: 1 1;
            }
         }
         program { // show tree and grid
            signal: "mouse,down,1"; source: "tree_events";
            filter: "tree_clip" "default";
            action: STATE_SET "visible" 0.0;
            transition: DECEL 0.3;
            target: "grid_clip";
            target: "tree_clip";
         }
         program { // hide tree and grid
            signal: "mouse,down,1"; source: "tree_events";
            filter: "tree_clip" "visible";
            action: STATE_SET "default" 0.0;
            transition: ACCELERATE 0.3;
            target: "grid_clip";
            target: "tree_clip";
         }

         //// Grid  ----------------------------------------------------------
         part { name: "grid_clip"; type: RECT;
            description { state: "default" 0.0;
               rel1.relative: 1.0 0.0;
               rel2.to_y: "status";
               rel2.relative: 1.0 0.0;
               rel2.offset: -1 0;
               min: 150 0;
               fixed: 1 1;
               align: 0.0 0.0;
               color: 255 255 255 0;
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               align: 1.0 0.0;
               color: 255 255 255 255;
            }
         }
         part { name: "grid.swallow"; type: SWALLOW;
            clip_to: "grid_clip";
            description { state: "default" 0.0;
               rel1.to: "grid_clip";
               rel2.to: "grid_clip";
               fixed: 1 1;
            }
         }
         part { name: "grid_events"; type: RECT;
            repeat_events: 1;
            description { state: "default" 0.0;
               rel1.to: "grid_clip";
               rel2.to: "grid_clip";
               rel1.offset: -50 0;
               color: 0 0 0 0;
               fixed: 1 1;
            }
         }
         program { // show grid
            signal: "mouse,in"; source: "grid_events";
            action: STATE_SET "visible" 0.0;
            transition: DECEL 0.3 CURRENT;
            target: "grid_clip";
         }
         program { // hide grid
            signal: "mouse,out"; source: "grid_events";
            filter: "tree_clip" "default"; // do not hide if tree is visble
            action: STATE_SET "default" 0.0;
            transition: ACCEL 0.3 CURRENT;
            target: "grid_clip";
         }

         //// Controls  -------------------------------------------------------
         part { name: "controls_clip"; type: RECT;
            description { state: "default" 0.0;
               color: 255 255 255 0;
            }
            description { state: "visible" 0.0;
               color: 255 255 255 255;
            }
         }
         part { name: "controls_bg"; type: RECT;
            clip_to: "controls_clip";
            description { state: "default" 0.0;
               rel1.to: "controls.box";
               rel2.to: "controls.box";
               rel1.offset: -6 0;
               rel2.offset: 5 5;
               color: 100 100 100 100;
            }
         }
         part { name: "controls.box"; type: BOX;
            clip_to: "controls_clip";
            description { state: "default" 0.0;
               rel1.relative: 0.5 0.0;
               rel2.relative: 0.5 0.0;
               align: 0.5 1.0;
               fixed: 1 1;
               box.min: 1 1;
            }
            description { state: "visible" 0.0;
               inherit: "default" 0.0;
               align: 0.5 0.0;
            }
         }
         part { name: "controls_event"; type: RECT;
            repeat_events: 1;
            description { state: "default" 0.0;
               rel1.relative: 0.25 0.0;
               rel2.relative: 0.75 0.0;
               rel2.offset: 0.0 32;
               color: 0 0 0 0;
            }
         }
         program { name: "show_controls";
            signal: "mouse,in"; source: "controls_event";
            action: STATE_SET "visible" 0.0;
            transition: DECEL 0.2;
            target: "controls.box";
            target: "controls_clip";
         }
         program { name: "hide_controls";
            signal: "mouse,out"; source: "controls_event";
            action: STATE_SET "default" 0.0;
            transition: ACCEL 0.2;
            target: "controls.box";
            target: "controls_clip";
            in: 1.0 0;
         }
         program { name: "stop_hiding";
            signal: "mouse,in"; source: "controls_event";
            action: ACTION_STOP;
            target: "hide_controls";
         }

         //// Statusbar  -----------------------------------------------------
         part { name: "status"; type: IMAGE;
            description { state: "default" 0.0;
               rel1.relative: 0.0 1.0;
               rel1.offset: 0 -24;
               image.normal: "status_bg.png";
            }
            part { name: "status.swallow"; type: SWALLOW;
               description { state: "default" 0.0;
                  rel1.offset: 3 0;
                  rel2.offset: -4 -1;
               }
            }
            part { name: "status_bevel"; mouse_events: 0;
               description { state: "default" 0.0;
                  image.normal: "bg_bevel.png";
                  image.border: 0 0 1 1;
                  image.middle: 0;
                  fill.smooth: 0;
               }
            }
            part { name: "status_glint"; type: IMAGE;
               description { state: "default" 0.0;
                  FIXED_SIZE(79, 5)
                  rel2.relative: 1.0 0.0;
                  rel2.offset: -1 0;
                  image.normal: "glint.png";
               }
            }
         }

      }
   }


   /// CROPPER ////////////////////////////////////////////////////////////////
   #include "cropper.edc"


   /// ICONS //////////////////////////////////////////////////////////////////
#define IC(Name, File) \
   group { name: "elm/icon/"##Name##"/default"; \
      min: 16 16; max: 0 0; \
      images.image: File COMP; \
      parts { part { name: "base"; \
         description { \
            aspect: 1.0 1.0; aspect_preference: BOTH; \
            image.normal: File; } } } }
   IC("document-save", "icon_document_save.png")
   IC("document-save-as", "icon_document_save_as.png")
   IC("edit-cut", "icon_edit_cut.png")
   IC("go-next", "icon_go_next.png")
   IC("go-previous", "icon_go_previous.png")
   IC("media-playback-start", "icon_media_playback_start.png")
   IC("media-playback-pause", "icon_media_playback_pause.png")
   IC("zoom", "icon_zoom.png")
   IC("zoom-in", "icon_zoom_in.png")
   IC("zoom-out", "icon_zoom_out.png")
   IC("zoom-original", "icon_zoom_original.png")
   IC("zoom-fit-best", "icon_zoom_fit_best.png")
   IC("rotate", "icon_rotate.png")
   IC("resize", "icon_resize.png")
   IC("object-rotate-left", "icon_object_rotate_left.png")
   IC("object-rotate-right", "icon_object_rotate_right.png")
   IC("object-flip-vertical", "icon_object_flip_horizontal.png")
   IC("object-flip-horizontal", "icon_object_flip_vertical.png")
   IC("preferences-system", "icon_preferences_system.png")
#undef IC

}

